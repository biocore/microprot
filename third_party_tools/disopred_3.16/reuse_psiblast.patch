--- run_disopred.pl.orig	2017-02-16 08:45:17.819442841 -0800
+++ run_disopred.pl	2017-02-16 09:23:17.225672851 -0800
@@ -7,6 +7,7 @@
 ##
 ## Please refer to the license agreement for permission of use and re-distribution
 ##
+## Stefan Janssen: changed this script to accept a pre-computed PSI-BLAST result as second input.
 
 use strict;
 use File::Basename;
@@ -32,14 +33,22 @@
 
 my $DISO2_FPR = 5; # the adjustable DISOPRED2 false positive rate, represented as an integer between 1 and 10
 
-# check whether the command line contains only one argument
-die "[$0] ERROR: The command line should only contain the path to the input sequence file\n" if ( scalar @ARGV != 1);
+# check whether the command line contains either one or two arguments
+die "[$0] ERROR: The command line should only contain the path to the input sequence file and optionally the path to a pre-computed PSI-BLAST mtx file.\n" if ( scalar @ARGV < 1) || ( scalar @ARGV > 2);
 
 # die if input file does not exist or is not a text file
 die "[$0] ERROR: Input file $ARGV[0] does not exist\n"  if !-e $ARGV[0];
 die "[$0] ERROR: Input file $ARGV[0] does not look like a text file\n"  if !-T $ARGV[0];
 
+# die if mtx file does not exist or is not a tex file
+if (defined $ARGV[1]) {
+	die "[$0] ERROR: Input file $ARGV[1] does not exist\n"  if !-e $ARGV[1];
+	die "[$0] ERROR: Input file $ARGV[1] does not look like a text file\n"  if !-T $ARGV[1];
+}
+
 my $fasta_fn = abs_path($ARGV[0]);
+my $mtx_fn = undef;
+$mtx_fn = abs_path($ARGV[1]) if (defined $ARGV[1]);
 my ($out_dir, $base) = (dirname($fasta_fn), basename($fasta_fn));
 
 $base =~ s/\.fa(sta)?$//;
@@ -47,26 +56,31 @@
 chomp $host_id;
 my $tmp_base = join '_', $base , $$, $host_id;
 
-my ($hits_file, $chk_file) = map {my $name = join '.', $tmp_base, $_; join '/', $out_dir, $name } ("blast", "chk");
-
-print "Running PSI-BLAST search ...\n\n";
-# run psiblast
-my $args = join ' ', $NCBI_DIR."blastpgp", "-i", $fasta_fn, "-d", $SEQ_DB, $PSIBLAST_PAR, "-C", $chk_file, "-o", $hits_file, "\n";
-system($args) == 0 or die "[$0] ERROR: $args failed: $?\n";
-
-print "Generating PSSM ...\n\n";
-
-$args = join ' ', "echo", $chk_file, ">", $tmp_base.".pn", "\n";
-system($args) == 0 or die "[$0] ERROR: $args failed: $?\n";
-
-$args = join ' ', "echo", $fasta_fn, ">", $tmp_base.".sn", "\n";
-system($args) == 0 or die "[$0] ERROR: $args failed: $?\n";
-
-$args = join ' ', $NCBI_DIR."makemat", "-P", $tmp_base, "\n";
-system($args) == 0 or die "[$0] ERROR: $args failed: $?\n";
-
-my $mtx_fn = join '/', $out_dir, $tmp_base.".mtx";
-die "[$0] ERROR: Couldn't find the mtx file $mtx_fn\n" if !-e $mtx_fn;
+my ($args, $hits_file, $chk_file) = (undef, undef, undef);
+if (not defined $mtx_fn) {
+	($hits_file, $chk_file) = map {my $name = join '.', $tmp_base, $_; join '/', $out_dir, $name } ("blast", "chk");
+
+	print "Running PSI-BLAST search ...\n\n";
+	# run psiblast
+	$args = join ' ', $NCBI_DIR."blastpgp", "-i", $fasta_fn, "-d", $SEQ_DB, $PSIBLAST_PAR, "-C", $chk_file, "-o", $hits_file, "\n";
+	system($args) == 0 or die "[$0] ERROR: $args failed: $?\n";
+
+	print "Generating PSSM ...\n\n";
+
+	$args = join ' ', "echo", $chk_file, ">", $tmp_base.".pn", "\n";
+	system($args) == 0 or die "[$0] ERROR: $args failed: $?\n";
+
+	$args = join ' ', "echo", $fasta_fn, ">", $tmp_base.".sn", "\n";
+	system($args) == 0 or die "[$0] ERROR: $args failed: $?\n";
+
+	$args = join ' ', $NCBI_DIR."makemat", "-P", $tmp_base, "\n";
+	system($args) == 0 or die "[$0] ERROR: $args failed: $?\n";
+
+	$mtx_fn = join '/', $out_dir, $tmp_base.".mtx";
+	die "[$0] ERROR: Couldn't find the mtx file $mtx_fn\n" if !-e $mtx_fn;
+} else {
+	print "Re-using pre-computed PSI-BLAST search ...\n\n";
+}
 
 my @exts = ("diso", "diso2", "nndiso", "dnb", "diso", "in_svm_dat", "out_svm_dat", "pbdat");
 my ($diso_fn, $diso2_fn, $nndiso_fn, $dnb_fn, $diso3_fn, $dat_fn, $svc_fn, $pb_fn) = map { abs_path(join '/', $out_dir, $base.".$_") } @exts;
@@ -108,7 +122,9 @@
 
 # Remove temporary files
 print "Cleaning up ...\n\n";
-$args = join ' ', "rm -f", $hits_file, $chk_file, "error.log", $mtx_fn, <$tmp_base*>, glob("$out_dir/*horiz_d"), $diso2_fn, $nndiso_fn, $dnb_fn, $dat_fn, $svc_fn, "\n";
+my @psiblast_files = ();
+@psiblast_files = ($hits_file, $mtx_fn, $chk_file) if (not defined $ARGV[1]);
+$args = join ' ', "rm -f", @psiblast_files, "error.log", <$tmp_base*>, glob("$out_dir/*horiz_d"), $diso2_fn, $nndiso_fn, $dnb_fn, $dat_fn, $svc_fn, "\n";
 system($args) == 0 or die "[$0] ERROR: $args failed: $?\n";
 
 print join "\n\n", "Finished", "Disordered residue predictions in $diso3_fn", "Protein binding disordered residue predictions in $pb_fn", '';
